{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  /*\n  useState devuelve un array de dos posiciones en la primera se encuentra el valor del componente\n  y en la segunda posici贸n se guarda el valor de como se actualiza el componente.\n  En el parametro de la funci贸n se pasa el valor inicial del componente\n  \n  useState returns an array with two positions, in the first position is the actual value of the component\n  while on the second position is stored the function to how the value of the component is uploaded.\n  The prop of the function useState is where we store the initial value of the component \n  */\n  const [contador, setContador] = useState(0);\n  /* Is the same as the line 13 but I used destructuring\n  const contador = useState(0); \n  const contadorValue = contador[0]\n  const updateContador = contador[1];\n  */\n  //const [contadorValue,updateContador] = useState(0);\n  //If you want to treat with the prev value of the component is better to use this declaration\n\n  /*setContador(prevContador => {\n    return prevContador + 1\n    }) \n  */\n\n  const handleClick = () => {\n    return params => {\n      if (params) setContador(contador + 1);else setContador(contador - 1);\n    };\n  };\n\n  const handleClickReset = () => {\n    setContador(0);\n  };\n\n  const isEven = contador % 2 === 0;\n  const mensajePar = isEven ? 'Es par' : 'Es impar';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"El valor del contador es :\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: contador\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mensajePar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick(1),\n      children: \"Incrementar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick(0),\n      children: \"Decrementar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClickReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"TatSB6kTJqmlLYw1AID1qIX14hw=\");\n\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 72,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","useState","App","props","contador","setContador","handleClick","params","handleClickReset","isEven","mensajePar","root","createRoot","document","getElementById","render"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part1/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\n\nconst App = (props) => {\n  /*\n  useState devuelve un array de dos posiciones en la primera se encuentra el valor del componente\n  y en la segunda posici贸n se guarda el valor de como se actualiza el componente.\n  En el parametro de la funci贸n se pasa el valor inicial del componente\n  \n  useState returns an array with two positions, in the first position is the actual value of the component\n  while on the second position is stored the function to how the value of the component is uploaded.\n  The prop of the function useState is where we store the initial value of the component \n  */\n  const [contador, setContador] = useState(0);\n\n  /* Is the same as the line 13 but I used destructuring\n  const contador = useState(0); \n  const contadorValue = contador[0]\n  const updateContador = contador[1];\n  */\n  //const [contadorValue,updateContador] = useState(0);\n\n\n\n  //If you want to treat with the prev value of the component is better to use this declaration\n\n  /*setContador(prevContador => {\n    return prevContador + 1\n    }) \n  */\n  const handleClick = () => {\n    return (params) => {\n      if(params) setContador(contador + 1);\n      else setContador(contador -1);\n    }\n  }\n\n  const handleClickReset = () => {\n    setContador(0);\n  }\n\n  const isEven = contador % 2 === 0\n  const mensajePar = isEven ? 'Es par' : 'Es impar';\n\n  return (\n    <div>\n      <p>El valor del contador es :</p>\n      <h1>{contador}</h1>\n      <p>{mensajePar}</p>\n      <button onClick={handleClick(1)}>\n        Incrementar\n      </button>\n      <button onClick={handleClick(0)}>\n        Decrementar\n      </button>\n      <button onClick={handleClickReset}>\n        Reset\n      </button>\n    </div>)\n}\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\n\n\n\n\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;EAAA;;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC;EAEA;AACF;AACA;AACA;AACA;EACE;EAIA;;EAEA;AACF;AACA;AACA;;EACE,MAAMK,WAAW,GAAG,MAAM;IACxB,OAAQC,MAAD,IAAY;MACjB,IAAGA,MAAH,EAAWF,WAAW,CAACD,QAAQ,GAAG,CAAZ,CAAX,CAAX,KACKC,WAAW,CAACD,QAAQ,GAAE,CAAX,CAAX;IACN,CAHD;EAID,CALD;;EAOA,MAAMI,gBAAgB,GAAG,MAAM;IAC7BH,WAAW,CAAC,CAAD,CAAX;EACD,CAFD;;EAIA,MAAMI,MAAM,GAAGL,QAAQ,GAAG,CAAX,KAAiB,CAAhC;EACA,MAAMM,UAAU,GAAGD,MAAM,GAAG,QAAH,GAAc,UAAvC;EAEA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UAAKL;IAAL;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAA,UAAIM;IAAJ;MAAA;MAAA;MAAA;IAAA,QAHF,eAIE;MAAQ,OAAO,EAAEJ,WAAW,CAAC,CAAD,CAA5B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJF,eAOE;MAAQ,OAAO,EAAEA,WAAW,CAAC,CAAD,CAA5B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eAUE;MAAQ,OAAO,EAAEE,gBAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD,CAxDD;;GAAMN,G;;KAAAA,G;AAyDN,MAAMS,IAAI,GAAGZ,QAAQ,CAACa,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AAOAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CASA;AACA;AACA;;AACAf,eAAe"},"metadata":{},"sourceType":"module"}