{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  const [leftCounter, setLeftCounter] = useState(0);\n  const [rightCounter, setRightCounter] = useState(0);\n  /*\r\n  Normally is best to use atomic states, the most isolated states we have the better will be for the future understanding\r\n  of the code, but you may need to use compound states such as objects, as is stated below:\r\n  */\n\n  const [counters, setCounters] = useState({\n    left: 0,\n    right: 0,\n    clicks: 0\n  });\n\n  const handleClick = params => {\n    return () => {\n      if (params === 'left') setCounters({\n        left: counters.left + 1,\n        right: counters.right\n      });else if (params === 'right') setCounters({\n        left: counters.left,\n        right: counters.right + 1\n      });\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [counters.left, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick('left'),\n      children: \"Left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick('right'),\n      children: \"Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), counters.right]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Z6C+RuDI2sHGmxqOADypo0eesXY=\");\n\n_c = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 52,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","useState","App","props","leftCounter","setLeftCounter","rightCounter","setRightCounter","counters","setCounters","left","right","clicks","handleClick","params","root","createRoot","document","getElementById","render"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part1/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst App = (props) => {\r\n  const [leftCounter, setLeftCounter] = useState(0);\r\n  const [rightCounter, setRightCounter] = useState(0);\r\n\r\n  /*\r\n  Normally is best to use atomic states, the most isolated states we have the better will be for the future understanding\r\n  of the code, but you may need to use compound states such as objects, as is stated below:\r\n  */\r\n\r\n  const [counters, setCounters] = useState({\r\n    left: 0,\r\n    right: 0, \r\n    clicks: 0\r\n  })\r\n\r\n\r\n  const handleClick = (params) => {\r\n    return () => {\r\n      if (params === 'left') setCounters({\r\n        left: counters.left + 1,\r\n        right: counters.right\r\n      })\r\n      else if (params === 'right') setCounters({\r\n        left: counters.left,\r\n        right: counters.right + 1\r\n      });\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {counters.left}\r\n      <button onClick={handleClick('left')}>Left</button>\r\n      <button onClick={handleClick('right')}>Right</button>\r\n      {counters.right}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,MAAMC,GAAG,GAAIC,KAAD,IAAW;EAAA;;EACrB,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,CAAD,CAA9C;EACA,MAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,CAAD,CAAhD;EAEA;AACF;AACA;AACA;;EAEE,MAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC;IACvCS,IAAI,EAAE,CADiC;IAEvCC,KAAK,EAAE,CAFgC;IAGvCC,MAAM,EAAE;EAH+B,CAAD,CAAxC;;EAOA,MAAMC,WAAW,GAAIC,MAAD,IAAY;IAC9B,OAAO,MAAM;MACX,IAAIA,MAAM,KAAK,MAAf,EAAuBL,WAAW,CAAC;QACjCC,IAAI,EAAEF,QAAQ,CAACE,IAAT,GAAgB,CADW;QAEjCC,KAAK,EAAEH,QAAQ,CAACG;MAFiB,CAAD,CAAX,CAAvB,KAIK,IAAIG,MAAM,KAAK,OAAf,EAAwBL,WAAW,CAAC;QACvCC,IAAI,EAAEF,QAAQ,CAACE,IADwB;QAEvCC,KAAK,EAAEH,QAAQ,CAACG,KAAT,GAAiB;MAFe,CAAD,CAAX;IAK9B,CAVD;EAYD,CAbD;;EAeA,oBACE;IAAA,WACGH,QAAQ,CAACE,IADZ,eAEE;MAAQ,OAAO,EAAEG,WAAW,CAAC,MAAD,CAA5B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF,eAGE;MAAQ,OAAO,EAAEA,WAAW,CAAC,OAAD,CAA5B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHF,EAIGL,QAAQ,CAACG,KAJZ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AASD,CAxCD;;GAAMT,G;;KAAAA,G;AA0CN,MAAMa,IAAI,GAAGhB,QAAQ,CAACiB,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,GAAD;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAOA;AACA;AACA;;AACAnB,eAAe"},"metadata":{},"sourceType":"module"}