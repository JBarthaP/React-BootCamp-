{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part1\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  left: 0,\n  right: 0\n};\n\nconst WarningNotUsed = () => {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Todavia no se ha utilizado el contador\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 10\n  }, this);\n};\n/*\r\nIf you want to debug in React you can use the debugger declaration\r\nor use the dev tools of Chrome, where you can see and upload states or props\r\n*/\n\n\n_c = WarningNotUsed;\n\nconst ListOfClicks = _ref => {\n  let {\n    clicks\n  } = _ref;\n  //debugger;\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: clicks.join(', ')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n\n_c2 = ListOfClicks;\n\nconst App = props => {\n  _s();\n\n  /*\r\n  const [leftCounter, setLeftCounter] = useState(0);\r\n  const [rightCounter, setRightCounter] = useState(0);\r\n  \r\n  \r\n  Normally is best to use atomic states, the most isolated states we have the better will be for the future understanding\r\n  of the code, but you may need to use compound states such as objects, as is stated below:\r\n  */\n  const [counters, setCounters] = useState(INITIAL_STATE);\n  const [clicks, setClicks] = useState([]);\n\n  const handleClick = params => {\n    return () => {\n      //We can use the spread operator to maintain all the attributes of the objects\n      if (params === 'left') setCounters({ ...counters,\n        left: counters.left + 1\n      });else if (params === 'right') setCounters({ ...counters,\n        right: counters.right + 1\n      });\n      setClicks(prevClicks => {\n        //return prevClicks.concat(params)\n        //Or we could use the spread operator \n        return [...prevClicks, params];\n      });\n    };\n  };\n\n  const handleReset = () => {\n    setCounters(INITIAL_STATE);\n    setClicks([]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [counters.left, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick('left'),\n      children: \"Left\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick('right'),\n      children: \"Right\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), counters.right, /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Number of clicks: \", clicks.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"The last click was: \", clicks[clicks.length - 1]]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), clicks.length === 0 ? /*#__PURE__*/_jsxDEV(WarningNotUsed, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ListOfClicks, {\n      clicks: clicks\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleReset,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"PRxuOCLKhGADY+AO5ApNUn6IERY=\");\n\n_c3 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 85,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"WarningNotUsed\");\n$RefreshReg$(_c2, \"ListOfClicks\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","useState","INITIAL_STATE","left","right","WarningNotUsed","ListOfClicks","clicks","join","App","props","counters","setCounters","setClicks","handleClick","params","prevClicks","handleReset","length","root","createRoot","document","getElementById","render"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part1/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { useState } from 'react';\r\n\r\n\r\nconst INITIAL_STATE = {\r\n  left: 0,\r\n  right: 0, \r\n}\r\nconst WarningNotUsed = () => {\r\n  return <h1>Todavia no se ha utilizado el contador</h1>\r\n}\r\n\r\n/*\r\nIf you want to debug in React you can use the debugger declaration\r\nor use the dev tools of Chrome, where you can see and upload states or props\r\n*/\r\n\r\nconst ListOfClicks = ({clicks}) => {\r\n  //debugger;\r\n  return <p>{clicks.join(', ')}</p>\r\n}\r\n\r\nconst App = (props) => {\r\n  /*\r\n  const [leftCounter, setLeftCounter] = useState(0);\r\n  const [rightCounter, setRightCounter] = useState(0);\r\n  \r\n  \r\n  Normally is best to use atomic states, the most isolated states we have the better will be for the future understanding\r\n  of the code, but you may need to use compound states such as objects, as is stated below:\r\n  */\r\n\r\n  const [counters, setCounters] = useState(INITIAL_STATE)\r\n  const [clicks, setClicks] = useState([])\r\n\r\n\r\n  const handleClick = (params) => {\r\n    return () => {\r\n      //We can use the spread operator to maintain all the attributes of the objects\r\n      if (params === 'left') setCounters({\r\n        ...counters,\r\n        left: counters.left + 1,\r\n      })\r\n      else if (params === 'right') setCounters({\r\n        ...counters,\r\n        right: counters.right + 1,\r\n      });\r\n      setClicks((prevClicks) => {\r\n        //return prevClicks.concat(params)\r\n        //Or we could use the spread operator \r\n        return [...prevClicks, params];\r\n      })\r\n      \r\n    }\r\n\r\n  }\r\n\r\n  const handleReset = () => {\r\n    setCounters(INITIAL_STATE)\r\n    setClicks([])\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {counters.left}\r\n      <button onClick={handleClick('left')}>Left</button>\r\n      <button onClick={handleClick('right')}>Right</button>\r\n      {counters.right}\r\n      <p>Number of clicks: {clicks.length}</p> \r\n      <p>The last click was: {clicks[clicks.length-1]}</p>\r\n      {clicks.length === 0 \r\n      ? <WarningNotUsed/>\r\n      : <ListOfClicks clicks = {clicks}></ListOfClicks>}\r\n      <button onClick={handleReset}>Reset</button> \r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();"],"mappings":"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"},"metadata":{},"sourceType":"module"}