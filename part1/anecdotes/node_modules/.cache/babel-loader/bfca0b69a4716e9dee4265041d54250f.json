{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part1\\\\anecdotes\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  const [selected, setSelected] = useState(0);\n  const [points, setPoints] = useState(Array(anecdotes.length).fill(0));\n  /*\n  This algorithm is based in pure mathematics, you only need to solve the \n  following equation to find this expression. The equation is this:\n   1º\n  min <= X <= max\n   2º\n  0 <= X - min <= max - min  \n   \n  3ºAdd the random number\n  0 <= (X - min) * r <= (max - min) * r\n   4ºAdding min again we see we need a value for r thats it between 0 and 1\n  so we use Math.random() \n  min <= min + (X - min) * r <= min + (max - min) * r\n   5ºAnd we use Math.floor to get the deepest number, so we use the last expression\n  and we have min + (max-min+1) * r\n  +1 for the initial value being 0\n  */\n\n  const generateRandomInteger = (min, max) => {\n    return Math.floor(min + Math.random() * (max - min + 1));\n  };\n\n  const handleClick = () => {\n    setSelected(generateRandomInteger(0, anecdotes.length - 1));\n  };\n\n  const handleVote = () => {\n    const copy = [...points];\n    copy[selected] += 1;\n    setPoints(copy);\n  };\n\n  const mostVoted = () => {\n    const max = Math.max(...points);\n    const mostVotes = points[max] > 0 ? anecdotes[max] : null;\n    return mostVotes;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Anecdote of the day\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), props.anecdotes[selected], /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), points[selected] > 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"has \", points[selected], \" votes\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 30\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleVote,\n      children: \"vote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"next anecdote\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Anecdote with most votes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: mostVoted()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KXgfoYN4i+3GtgvJu6VHd+ypb9A=\");\n\n_c = App;\nconst anecdotes = ['If it hurts, do it more often', 'Adding manpower to a late software project makes it later!', 'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.', 'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.', 'Premature optimization is the root of all evil.', 'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'];\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {\n    anecdotes: anecdotes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 82,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","useState","App","props","selected","setSelected","points","setPoints","Array","anecdotes","length","fill","generateRandomInteger","min","max","Math","floor","random","handleClick","handleVote","copy","mostVoted","mostVotes","root","createRoot","document","getElementById","render"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part1/anecdotes/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\n\nconst App = (props) => {\n  const [selected, setSelected] = useState(0)\n  const [points, setPoints] = useState(Array(anecdotes.length).fill(0))\n\n  \n\n  /*\n  This algorithm is based in pure mathematics, you only need to solve the \n  following equation to find this expression. The equation is this:\n\n  1º\n  min <= X <= max\n\n  2º\n  0 <= X - min <= max - min  \n   \n  3ºAdd the random number\n  0 <= (X - min) * r <= (max - min) * r\n\n  4ºAdding min again we see we need a value for r thats it between 0 and 1\n  so we use Math.random() \n  min <= min + (X - min) * r <= min + (max - min) * r\n\n  5ºAnd we use Math.floor to get the deepest number, so we use the last expression\n  and we have min + (max-min+1) * r\n  +1 for the initial value being 0\n  */\n  const generateRandomInteger = (min, max) => {\n    return Math.floor(min + Math.random() * (max - min + 1))\n  }\n\n  const handleClick = () => {\n    setSelected(generateRandomInteger(0, anecdotes.length - 1))\n  }\n\n  const handleVote = () => {\n    const copy = [...points];\n    copy[selected] += 1;\n    setPoints(copy);\n  }\n\n  const mostVoted = () => {\n    const max = Math.max(...points)\n    const mostVotes = points[max] > 0 ? anecdotes[max]\n    : null  \n    return mostVotes;\n    \n  }\n\n  return (\n    <div>\n      <h1>Anecdote of the day</h1>\n      {props.anecdotes[selected]}\n      <br></br>\n      {points[selected] > 0 ?<p>has {points[selected]} votes</p>: null}\n      <button onClick={handleVote}>vote</button>\n      <button onClick={handleClick}>next anecdote</button>\n      <h1>Anecdote with most votes</h1>\n      {}<p>{mostVoted()}</p>\n    </div>\n  )\n}\n\nconst anecdotes = [\n  'If it hurts, do it more often',\n  'Adding manpower to a late software project makes it later!',\n  'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n  'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n  'Premature optimization is the root of all evil.',\n  'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n]\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App anecdotes={anecdotes} />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;EAAA;;EACrB,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BJ,QAAQ,CAAC,CAAD,CAAxC;EACA,MAAM,CAACK,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAACO,KAAK,CAACC,SAAS,CAACC,MAAX,CAAL,CAAwBC,IAAxB,CAA6B,CAA7B,CAAD,CAApC;EAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAKE,MAAMC,qBAAqB,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;IAC1C,OAAOC,IAAI,CAACC,KAAL,CAAWH,GAAG,GAAGE,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,CAAjB,CAAP;EACD,CAFD;;EAIA,MAAMK,WAAW,GAAG,MAAM;IACxBb,WAAW,CAACO,qBAAqB,CAAC,CAAD,EAAIH,SAAS,CAACC,MAAV,GAAmB,CAAvB,CAAtB,CAAX;EACD,CAFD;;EAIA,MAAMS,UAAU,GAAG,MAAM;IACvB,MAAMC,IAAI,GAAG,CAAC,GAAGd,MAAJ,CAAb;IACAc,IAAI,CAAChB,QAAD,CAAJ,IAAkB,CAAlB;IACAG,SAAS,CAACa,IAAD,CAAT;EACD,CAJD;;EAMA,MAAMC,SAAS,GAAG,MAAM;IACtB,MAAMP,GAAG,GAAGC,IAAI,CAACD,GAAL,CAAS,GAAGR,MAAZ,CAAZ;IACA,MAAMgB,SAAS,GAAGhB,MAAM,CAACQ,GAAD,CAAN,GAAc,CAAd,GAAkBL,SAAS,CAACK,GAAD,CAA3B,GAChB,IADF;IAEA,OAAOQ,SAAP;EAED,CAND;;EAQA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,EAEGnB,KAAK,CAACM,SAAN,CAAgBL,QAAhB,CAFH,eAGE;MAAA;MAAA;MAAA;IAAA,QAHF,EAIGE,MAAM,CAACF,QAAD,CAAN,GAAmB,CAAnB,gBAAsB;MAAA,mBAAQE,MAAM,CAACF,QAAD,CAAd;IAAA;MAAA;MAAA;MAAA;IAAA,QAAtB,GAA2D,IAJ9D,eAKE;MAAQ,OAAO,EAAEe,UAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QALF,eAME;MAAQ,OAAO,EAAED,WAAjB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAOE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eAQI;MAAA,UAAIG,SAAS;IAAb;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAYD,CA7DD;;GAAMnB,G;;KAAAA,G;AA+DN,MAAMO,SAAS,GAAG,CAChB,+BADgB,EAEhB,4DAFgB,EAGhB,8LAHgB,EAIhB,iHAJgB,EAKhB,iDALgB,EAMhB,oLANgB,CAAlB;AAUA,MAAMc,IAAI,GAAGxB,QAAQ,CAACyB,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,GAAD;IAAK,SAAS,EAAElB;EAAhB;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAMA;AACA;AACA;;AACAT,eAAe"},"metadata":{},"sourceType":"module"}