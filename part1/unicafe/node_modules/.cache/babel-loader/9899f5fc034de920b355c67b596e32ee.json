{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part1\\\\unicafe\\\\src\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Button = _ref => {\n  let {\n    event,\n    text\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: event(text),\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\n\nconst Statistics = () => {\n  return /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n/*\nWe cant have the logic of a component in where we update it\n*/\n\n\n_c2 = Statistics;\n\nconst App = () => {\n  _s();\n\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const all = () => {\n    return good + neutral + bad;\n  };\n\n  const positive = () => {\n    const total = all();\n    return total > 0 ? parseFloat(good / total * 100) : 0;\n  };\n\n  const average = () => {\n    const map = {\n      good: 1,\n      neutral: 0,\n      bad: -1\n    };\n    const averageValoration = parseFloat(good * map.good + neutral * map.neutral + bad * map.bad);\n    return averageValoration;\n  };\n\n  const handleClick = params => {\n    return () => {\n      if (params === 'good') {\n        setGood(good + 1);\n      } else if (params === 'neutral') {\n        setNeutral(neutral + 1);\n      } else if (params === 'bad') {\n        setBad(bad + 1);\n      }\n\n      console.log('This is ' + good);\n    };\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"give feedback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      event: handleClick,\n      text: 'good'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      event: handleClick,\n      text: 'neutral'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      event: handleClick,\n      text: 'bad'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"statistics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"good \", good]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"neutral \", neutral]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"bad \", bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"all \", all()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"average \", average()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"positive \", positive(), \" %\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n\n_c3 = App;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 81,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"Statistics\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","ReactDOM","reportWebVitals","useState","Button","event","text","Statistics","App","good","setGood","neutral","setNeutral","bad","setBad","all","positive","total","parseFloat","average","map","averageValoration","handleClick","params","console","log","root","createRoot","document","getElementById","render"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part1/unicafe/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { useState } from 'react';\n\nconst Button = ({ event, text }) => {\n  return (\n    <button onClick={event(text)}>\n      {text}\n    </button>)\n}\n\nconst Statistics = () => {\n  return (\n    <p></p>\n  )\n}\n\n/*\nWe cant have the logic of a component in where we update it\n*/\n\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0)\n  const [neutral, setNeutral] = useState(0)\n  const [bad, setBad] = useState(0)\n  const all = () => {\n    return good + neutral + bad;\n  }\n\n  const positive = () => {\n    const total = all()\n    return total > 0 ? parseFloat(good / total * 100) : 0;\n  }\n  const average = () => {\n    const map = {\n      good: 1,\n      neutral: 0,\n      bad: -1\n    }\n    const averageValoration = parseFloat(good*map.good + neutral*map.neutral+bad*map.bad);\n    return averageValoration;\n  }\n\n\n  const handleClick = (params) => {\n    return () => {\n      if (params === 'good') {\n        setGood(good + 1)\n      } else if (params === 'neutral') {\n        setNeutral(neutral + 1);\n      } else if (params === 'bad') {\n        setBad(bad + 1);\n      }\n      console.log('This is ' + good)\n    }\n  }\n\n  return (\n    <div>\n      <h1>give feedback</h1>\n      <Button event={handleClick} text={'good'}></Button>\n      <Button event={handleClick} text={'neutral'}></Button>\n      <Button event={handleClick} text={'bad'}></Button>\n      <h1>statistics</h1>\n      <p>good {good}</p>\n      <p>neutral {neutral}</p>\n      <p>bad {bad}</p>\n      <p>all {all()}</p>\n      <p>average {average()}</p> \n      <p>positive {positive()} %</p>\n    </div>\n  )\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <App />\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}