{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joseb\\\\OneDrive - Universidad Complutense de Madrid (UCM)\\\\Documentos\\\\React\\\\React-BootCamp-\\\\part2\\\\practice\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport { Note } from './Note.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App(props) {\n  _s();\n\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNotes] = useState('');\n  /*\n  When we iterate through a list of objects React normally uses keys for \n  improving the performance of the application. The key usually is \n  an unique identificator an is a good practice not to use random numbers\n  or index because it can give React problems. \n   Index fail to this task because if you delete an object of the\n  list the index is out of phase so is not longer a good reference\n  But if you know that the list is immutable, you could use it´\n  to use it map(note,index) => ...\n  */\n\n  /*\n  In the event of an input if you search for the value in the target prop \n  you ll find the text in the input\n  */\n\n  /*\n  Using forms make us to change the way we where handling the events of the button.\n  By default the last button of a formulary\n  */\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    console.log(\"crear nota\");\n    const noteToAddToState = {\n      id: notes.length + 1,\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5\n    };\n    console.log(noteToAddToState); //setNotes([...notes,noteToAddToState])\n\n    setNotes(notes.concat(noteToAddToState));\n    setNewNotes('');\n  };\n\n  const handleChange = event => {\n    setNewNotes(event.target.value);\n  };\n  /*\n  Remember to use the key in the place where you iterate not on the component\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Notes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: notes.map(note => /*#__PURE__*/_jsxDEV(Note, {\n        content: note.content,\n        date: note.date\n      }, note.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 30\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleChange,\n        value: newNote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Crear nota\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"YVpeoIcWuTvHqXyp0s4X0HLV4xk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Note","useState","App","props","notes","setNotes","newNote","setNewNotes","handleSubmit","event","preventDefault","console","log","noteToAddToState","id","length","content","date","Date","toISOString","important","Math","random","concat","handleChange","target","value","map","note"],"sources":["C:/Users/joseb/OneDrive - Universidad Complutense de Madrid (UCM)/Documentos/React/React-BootCamp-/part2/practice/src/App.js"],"sourcesContent":["import './App.css';\nimport { Note } from './Note.js';\nimport { useState } from 'react';\n\n\nfunction App(props) {\n  const [notes, setNotes] = useState(props.notes);\n  const [newNote, setNewNotes] = useState('')\n\n  /*\n  When we iterate through a list of objects React normally uses keys for \n  improving the performance of the application. The key usually is \n  an unique identificator an is a good practice not to use random numbers\n  or index because it can give React problems. \n\n  Index fail to this task because if you delete an object of the\n  list the index is out of phase so is not longer a good reference\n  But if you know that the list is immutable, you could use it´\n  to use it map(note,index) => ...\n  */\n\n  /*\n  In the event of an input if you search for the value in the target prop \n  you ll find the text in the input\n  */\n\n  /*\n  Using forms make us to change the way we where handling the events of the button.\n  By default the last button of a formulary\n  */\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"crear nota\")\n    const noteToAddToState = {\n    id: notes.length + 1,\n    content: newNote,\n    date: new Date().toISOString(),\n    important: Math.random() < 0.5\n    }\n    console.log(noteToAddToState)\n    \n    //setNotes([...notes,noteToAddToState])\n    setNotes(notes.concat(noteToAddToState))\n    setNewNotes('')\n  }\n  const handleChange = (event) => {\n    setNewNotes(event.target.value)\n  }\n\n  /*\n  Remember to use the key in the place where you iterate not on the component\n  */\n  return (\n    <div>\n      <h1>Notes</h1>\n      <ul>\n        {notes.map((note) => <Note key={note.id} content={note.content} date={note.date}></Note>)}\n      </ul>\n\n      <form onSubmit={handleSubmit}>\n        <input type='text' onChange={handleChange} value={newNote}></input>\n        <button>Crear nota</button>\n      </form>\n    </div>\n\n  )\n\n}\n\nexport default App;"],"mappings":";;;AAAA,OAAO,WAAP;AACA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;EAAA;;EAClB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACE,KAAK,CAACC,KAAP,CAAlC;EACA,MAAM,CAACE,OAAD,EAAUC,WAAV,IAAyBN,QAAQ,CAAC,EAAD,CAAvC;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAGE;AACF;AACA;AACA;;EAEE;AACF;AACA;AACA;;EAEE,MAAMO,YAAY,GAAIC,KAAD,IAAW;IAC9BA,KAAK,CAACC,cAAN;IACAC,OAAO,CAACC,GAAR,CAAY,YAAZ;IACA,MAAMC,gBAAgB,GAAG;MACzBC,EAAE,EAAEV,KAAK,CAACW,MAAN,GAAe,CADM;MAEzBC,OAAO,EAAEV,OAFgB;MAGzBW,IAAI,EAAE,IAAIC,IAAJ,GAAWC,WAAX,EAHmB;MAIzBC,SAAS,EAAEC,IAAI,CAACC,MAAL,KAAgB;IAJF,CAAzB;IAMAX,OAAO,CAACC,GAAR,CAAYC,gBAAZ,EAT8B,CAW9B;;IACAR,QAAQ,CAACD,KAAK,CAACmB,MAAN,CAAaV,gBAAb,CAAD,CAAR;IACAN,WAAW,CAAC,EAAD,CAAX;EACD,CAdD;;EAeA,MAAMiB,YAAY,GAAIf,KAAD,IAAW;IAC9BF,WAAW,CAACE,KAAK,CAACgB,MAAN,CAAaC,KAAd,CAAX;EACD,CAFD;EAIA;AACF;AACA;;;EACE,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAA,UACGtB,KAAK,CAACuB,GAAN,CAAWC,IAAD,iBAAU,QAAC,IAAD;QAAoB,OAAO,EAAEA,IAAI,CAACZ,OAAlC;QAA2C,IAAI,EAAEY,IAAI,CAACX;MAAtD,GAAWW,IAAI,CAACd,EAAhB;QAAA;QAAA;QAAA;MAAA,QAApB;IADH;MAAA;MAAA;MAAA;IAAA,QAFF,eAME;MAAM,QAAQ,EAAEN,YAAhB;MAAA,wBACE;QAAO,IAAI,EAAC,MAAZ;QAAmB,QAAQ,EAAEgB,YAA7B;QAA2C,KAAK,EAAElB;MAAlD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QANF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAeD;;GA/DQJ,G;;KAAAA,G;AAiET,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}